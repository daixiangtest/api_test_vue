{"version":3,"file":"js/213.b8cd2d15.js","mappings":"qHAIAA,EAAQ,EAAU,CAACC,EAAKC,KACpB,MAAMC,EAASF,EAAIG,WAAaH,EAChC,IAAK,MAAOI,EAAKC,KAAQJ,EACrBC,EAAOE,GAAOC,EAElB,OAAOH,CAAM,C,+ECNV,MAAMI,GAAaC,EAAAA,EAAAA,IAAY,WAClC,CAEIC,MAAOA,KACI,CAEHC,IAAI,CAAC,EAELC,SAAS,GAETC,IAAI,EAEJC,WAAW,GAEXC,UAAU,GAEVC,SAAU,KAIlBC,QAAQ,CAEJC,UAAAA,GACI,OAAOC,KAAKL,WAAWM,QAAQC,GACR,MAAZA,EAAKC,MAEpB,EAEAC,UAAAA,GACI,OAAOJ,KAAKL,WAAWM,QAAQC,GACR,MAAZA,EAAKC,MAEpB,GAGJE,QAAQ,CAEJ,mBAAMC,GACF,MAAMC,QAAUC,EAAAA,EAAIF,cAAcN,KAAKR,IAAIiB,IAC1B,MAAbF,EAAIG,OACJV,KAAKL,WAAWY,EAAII,KAEpBC,QAAQC,IAAI,SAASb,KAAKR,IAAIiB,OAEtC,EAEA,eAAMK,GACF,MAAMP,QAAUC,EAAAA,EAAIM,UAAUd,KAAKR,IAAIiB,IACtB,MAAbF,EAAIG,SACJV,KAAKJ,UAAUW,EAAII,KAE3B,EAEA,iBAAMI,GACF,MAAMR,QAAUC,EAAAA,EAAIQ,gBAAgBhB,KAAKR,IAAIiB,IAC5B,MAAbF,EAAIG,SACJV,KAAKH,SAASU,EAAII,KAE1B,GAEJM,QAAS,CACLC,SAAQ,EACRC,WAAW,CACPhC,IAAI,QACJiC,QAAQC,gB,yNC1BxB,MAAMC,GAASC,EAAAA,EAAAA,MACf,IAAIC,GAAOnC,EAAAA,EAAAA,KAGPoC,GAASC,EAAAA,EAAAA,IAAI,IAEjBC,eAAeC,IACX,IAAIC,EAAO,CACPC,QAAQN,EAAOhC,IAAIiB,IAEnBF,QAAUC,EAAAA,EAAIuB,eAAeF,GAChB,MAAbtB,EAAIG,SACJe,EAASO,MAAMzB,EAAII,KACnBsB,IAER,CAEA,SAASA,IACL,IAAIC,EAAU,GACVC,EAAM,GACVV,EAASO,MAAMI,SAASlC,IACpBgC,EAAUG,MAAuB,IAAjBnC,EAAKgC,WAAiBI,QAAQ,IAC9CH,EAAME,KAAKE,EAAAA,EAAUC,MAAMtC,EAAKuC,aAAa,IAEjDN,EAAMO,UACNR,EAAUQ,UACV,IAAIC,EAAIC,SAASC,eAAe,mBAChCC,EAAAA,EAAQC,OAAOJ,EAAIT,EAAUC,EACjC,CAOA,SAASa,EAAW9C,GAChBoB,EAAOe,KAAK,CACRY,KAAK,SACLpB,OAAO,CACHpB,GAAGP,EAAKO,KAGpB,C,OAZAyC,EAAAA,EAAAA,KAAU,KACNtB,GAAgB,I,s+BClEpB,MAAMuB,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://api_test_vue/./node_modules/vue-loader/dist/exportHelper.js","webpack://api_test_vue/./src/store/modoles/proStore.js","webpack://api_test_vue/./src/views/home/records/RecordsView.vue","webpack://api_test_vue/./src/views/home/records/RecordsView.vue?2fa2"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n","import {defineStore} from 'pinia'\r\nimport api from '@/api/index'\r\n\r\nexport const ProjectStore=defineStore('proStore',\r\n    {   \r\n        // 全局数据存储\r\n        state: () => {\r\n            return {\r\n                // 项目信息\r\n                pro:{},\r\n                // 环境列表\r\n                env_list:[],\r\n                // 选择的测试环境\r\n                env:0,\r\n                // 保存接口列表\r\n                inetrfaces:[],\r\n                // 测试业务流列表\r\n                sceneList:[],\r\n                // 测试计划列表\r\n                taskList: []\r\n            }\r\n\r\n        },\r\n        getters:{\r\n            // 过滤出项目接口\r\n            interface1(){\r\n                return this.inetrfaces.filter((item) => {\r\n                    return item.type==='1'\r\n                })\r\n            },\r\n            // 过滤出第三方接口\r\n            interface2(){\r\n                return this.inetrfaces.filter((item) => {\r\n                    return item.type==='2'\r\n                })\r\n            }\r\n        },\r\n        // 定义全局的方法\r\n        actions:{\r\n            // 获取接口列表\r\n            async getInterFaces(){\r\n                const res=await api.getInterFaces(this.pro.id)\r\n                if (res.status===200){\r\n                    this.inetrfaces=res.data\r\n                }else{\r\n                    console.log(`获取项目id${this.pro.id}失败`)\r\n                }\r\n            },\r\n            // 获取测试业务流列表\r\n            async getScenes(){\r\n                const res=await api.getScenes(this.pro.id)\r\n                if (res.status===200){\r\n                    this.sceneList=res.data\r\n                }\r\n            },\r\n            // 获取测试计划\r\n            async getTestTask(){\r\n                const res=await api.getTestTaskList(this.pro.id)\r\n                if (res.status===200){\r\n                    this.taskList=res.data\r\n                }\r\n            }\r\n        },\r\n        persist: {\r\n            enabled:true,\r\n            strategies:{\r\n                key:\"users\",\r\n                storage:localStorage\r\n            }\r\n        }\r\n    },\r\n    \r\n  \r\n)","<template>\r\n    <div class=\"main\">\r\n        <!-- 折现图展示数据 -->\r\n         <div class=\"box1\" id=\"chat_pro_record\">\r\n\r\n         </div>\r\n         <!-- 展示执行记录的表格数据 -->\r\n         <el-table :data=\"recoders\" stripe style=\"width: 100%\" size=\"small\">\r\n            <el-table-column label=\"执行时间\" width=\"180\">\r\n                <template #default=\"scope\">\r\n\t\t\t\t\t{{dateTools.rDate(scope.row.create_time)}}\r\n\t\t\t\t\t<!-- {{dateTools.rTime(scope.row.create_time)}} -->\r\n\t\t\t\t</template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"env\" label=\"执行环境\" width=\"180\" />\r\n            <el-table-column prop=\"task\" label=\"测试计划\" />\r\n            <el-table-column prop=\"all\" label=\"总用例\" />\r\n            <el-table-column prop=\"success\" label=\"通过数\" />\r\n            <el-table-column prop=\"pass_rate\" label=\"通过率\">\r\n                <template #default=\"scope\">\r\n\t\t\t\t\t{{(scope.row.pass_rate * 100).toFixed(2) + '%'}}\r\n\t\t\t\t</template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"address\" label=\"测试报告\">\r\n                <template #default=\"scope\">\r\n\t\t\t\t\t<el-button @click=\"showReport(scope.row)\" icon=\"View\" type=\"primary\" plain\r\n\t\t\t\t\t\tsize=\"small\">查看报告</el-button>\r\n\t\t\t\t</template>\r\n            </el-table-column>\r\n        </el-table>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport api from '@/api/index'\r\nimport {ProjectStore} from '@/store/modoles/proStore'\r\nimport {ref,onMounted} from 'vue'\r\nimport mychart from '@/utils/chart'\r\nimport dateTools from '@/utils/dateTools'\r\nimport { useRouter } from 'vue-router'\r\n\r\nconst router = useRouter()\r\nvar pStore=ProjectStore()\r\n\r\n// 测试执行记录的数据\r\nvar recoders=ref([])\r\n// 获取测试执行记录的方法\r\nasync function getRecoderList(){\r\n    var params={\r\n        project:pStore.pro.id\r\n    }\r\n    var res=await api.getTestRecords(params)\r\n    if (res.status===200){\r\n        recoders.value=res.data\r\n        chartData()\r\n    }\r\n}\r\n// 处理数据进行图标渲染 (item.pass_rate * 100).toFixed(2) + '%'\r\nfunction chartData(){\r\n    let pass_rate=[]\r\n    let times=[]\r\n    recoders.value.forEach((item) => {\r\n        pass_rate.push((item.pass_rate * 100).toFixed(2))\r\n        times.push(dateTools.rhost(item.create_time))\r\n    })\r\n    times.reverse()\r\n    pass_rate.reverse()\r\n    var elm=document.getElementById('chat_pro_record')\r\n    mychart.chart3(elm,pass_rate,times)\r\n}\r\n// 挂在组件后获取执行记录的数据\r\nonMounted(() =>{\r\n    getRecoderList()\r\n})\r\n\r\n// 查看测试报告\r\nfunction showReport(item){\r\n    router.push({\r\n        name:\"report\",\r\n        params:{\r\n            id:item.id\r\n        }\r\n    })\r\n}\r\n\r\n</script>\r\n\r\n\r\n<style scoped lang=\"scss\">\r\n.box1 {\r\n\t\theight: 260px;\r\n\t\tbackground: #282828;\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n\r\n.main {\r\n    padding: 10px;\r\n}\r\n\r\n\r\n</style>","import script from \"./RecordsView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./RecordsView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./RecordsView.vue?vue&type=style&index=0&id=90441494&scoped=true&lang=scss\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-90441494\"]])\n\nexport default __exports__"],"names":["exports","sfc","props","target","__vccOpts","key","val","ProjectStore","defineStore","state","pro","env_list","env","inetrfaces","sceneList","taskList","getters","interface1","this","filter","item","type","interface2","actions","getInterFaces","res","api","id","status","data","console","log","getScenes","getTestTask","getTestTaskList","persist","enabled","strategies","storage","localStorage","router","useRouter","pStore","recoders","ref","async","getRecoderList","params","project","getTestRecords","value","chartData","pass_rate","times","forEach","push","toFixed","dateTools","rhost","create_time","reverse","elm","document","getElementById","mychart","chart3","showReport","name","onMounted","__exports__"],"sourceRoot":""}